{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ZodKmp: Kotlin Multiplatform Validation","text":"<p>ZodKmp is a Kotlin Multiplatform implementation of the popular Zod TypeScript validation library. It provides a declarative, type-safe way to validate data in your Kotlin Multiplatform projects.</p>"},{"location":"#platform-support","title":"Platform Support","text":"<p>ZodKmp supports the following platforms:</p> <ul> <li>Android (JVM)</li> <li>iOS (Native)</li> <li>JVM</li> <li>JS (JavaScript)</li> <li>Native (Linux, Windows, macOS)</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>\u2705 Declarative Schema Definition - Define validation rules upfront</li> <li>\u2705 Type Inference - Automatic type inference from schemas</li> <li>\u2705 Immutable Architecture - Immutable schemas that return new instances</li> <li>\u2705 Kotlin Multiplatform - Works on Android, iOS, and other Kotlin targets</li> <li>\u2705 Comprehensive API - Supports all major Zod validation features</li> <li>\u2705 Extensible - Easy to extend with custom validations</li> <li>\u2705 Zero Dependencies - Lightweight with minimal footprint</li> <li>\u2705 Excellent Error Messages - Detailed, customizable error reporting</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#gradle","title":"Gradle","text":"<p>Add the following to your <code>build.gradle.kts</code>:</p> <pre><code>kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(\"io.github.piashcse:zodkmp:1.2.0\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"#version-catalog-libsversionstoml","title":"Version Catalog (libs.versions.toml)","text":"<pre><code>[versions]\nzodkmp = \"1.2.0\"\n\n[libraries]\nzodkmp = { module = \"io.github.piashcse:zodkmp\", version.ref = \"zodkmp\" }\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>ZodKmp allows you to define validation schemas and use them to validate data:</p> <pre><code>import com.piashcse.zodkmp.Zod\n\n// Define a schema\nval userSchema = Zod.objectSchema&lt;User&gt;({\n    string(\"name\", Zod.string().min(2))\n    string(\"email\", Zod.string().email())\n    number(\"age\", Zod.number().min(0).max(120))\n}) { map -&gt;\n    User(\n        name = map[\"name\"] as String,\n        email = map[\"email\"] as String,\n        age = (map[\"age\"] as Number).toDouble()\n    )\n}\n\n// Use the schema\nval userData = mapOf(\n    \"name\" to \"John Doe\",\n    \"email\" to \"john@example.com\",\n    \"age\" to 30.0\n)\n\nval result = userSchema.safeParse(userData)\nwhen (result) {\n    is ZodResult.Success -&gt; println(\"Valid user: ${result.data}\")\n    is ZodResult.Failure -&gt; println(\"Validation errors: ${result.error.errors}\")\n}\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p> <ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"#developed-by","title":"\ud83d\udc68 Developed By","text":"<p>Mehedi Hassan Piash</p> <p> </p>"},{"location":"#license","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Mehedi Hassan Piash\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"advanced-usage/","title":"Advanced Usage","text":""},{"location":"advanced-usage/#error-handling","title":"Error Handling","text":"<p>ZodKmp provides detailed error information:</p> <pre><code>val userSchema = Zod.objectSchema&lt;User&gt;({\n    string(\"name\", Zod.string().min(2))\n    string(\"email\", Zod.string().email())\n}) { map -&gt;\n    User(\n        name = map[\"name\"] as String,\n        email = map[\"email\"] as String\n    )\n}\n\nval result = userSchema.safeParse(mapOf(\"name\" to \"A\", \"email\" to \"invalid-email\"))\n\nwhen (result) {\n    is ZodResult.Success -&gt; {\n        println(\"Valid data: ${result.data}\")\n    }\n    is ZodResult.Failure -&gt; {\n        result.error.errors.forEach { error -&gt;\n            println(\"Validation error: $error\")\n        }\n    }\n}\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#120-2024-10-06","title":"[1.2.0] - 2024-10-06","text":""},{"location":"changelog/#whats-changed","title":"What's Changed","text":"<ul> <li>docs: Update README and project metadata by @piashcse in #10</li> <li>refactor: Shorten app bar title by @piashcse in #11</li> <li>Unit test by @piashcse in #12</li> <li>chore: Remove tvOS and watchOS targets and bump version by @piashcse in #13</li> </ul> <p>Full Changelog: 1.1.0...1.2.0</p>"},{"location":"changelog/#110-2024-10-04","title":"[1.1.0] - 2024-10-04","text":""},{"location":"changelog/#whats-changed_1","title":"What's Changed","text":"<ul> <li>feat: Expand multiplatform support by @piashcse in #7</li> <li>chore: Bump version to 1.1.0 by @piashcse in #8</li> <li>Code optimization by @piashcse in #9</li> </ul> <p>Full Changelog: 1.0.0...1.1.0</p>"},{"location":"changelog/#100-2024-10-04","title":"[1.0.0] - 2024-10-04","text":""},{"location":"changelog/#whats-changed_2","title":"What's Changed","text":"<ul> <li>feat: Implement comprehensive validation schemas and UI by @piashcse in #1</li> <li>Multiplatform Support: Properly configured for Android, iOS and other KMP targets by @piashcse in #2</li> <li>Feature automate publishing by @piashcse in #3</li> <li>fix: Disable signing for JitPack builds by @piashcse in #4</li> <li>refactor: Simplify Maven Central publishing with vanniktech plugin by @piashcse in #5</li> <li>refactor: Configure Maven Central publishing coordinates by @piashcse in #6</li> </ul>"},{"location":"changelog/#new-contributors","title":"New Contributors","text":"<ul> <li>@piashcse made their first contribution in #1</li> </ul> <p>Full Changelog: 1.0.0</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<p>To get started with development, you'll need to set up your Kotlin Multiplatform environment:</p> <ol> <li>Install the latest version of Kotlin and the Kotlin Multiplatform plugin</li> <li>Clone the repository</li> <li>Build the project using Gradle: <code>./gradlew build</code></li> <li>Run the tests: <code>./gradlew test</code></li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow the Kotlin coding conventions</li> <li>Write clear, well-documented code</li> <li>Add tests for new functionality</li> <li>Keep changes focused and minimal</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#gradle","title":"Gradle","text":"<p>Add the following to your <code>build.gradle.kts</code>:</p> <pre><code>kotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(\"io.github.piashcse:zodkmp:1.2.0\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/#version-catalog-libsversionstoml","title":"Version Catalog (libs.versions.toml)","text":"<pre><code>[versions]\nzodkmp = \"1.2.0\"\n\n[libraries]\nzodkmp = { module = \"io.github.piashcse:zodkmp\", version.ref = \"zodkmp\" }\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<p>ZodKmp allows you to define validation schemas and use them to validate data:</p> <pre><code>import com.piashcse.zodkmp.Zod\n\n// Define a schema\nval userSchema = Zod.objectSchema&lt;User&gt;({\n    string(\"name\", Zod.string().min(2))\n    string(\"email\", Zod.string().email())\n    number(\"age\", Zod.number().min(0).max(120))\n}) { map -&gt;\n    User(\n        name = map[\"name\"] as String,\n        email = map[\"email\"] as String,\n        age = (map[\"age\"] as Number).toDouble()\n    )\n}\n\n// Use the schema\nval userData = mapOf(\n    \"name\" to \"John Doe\",\n    \"email\" to \"john@example.com\",\n    \"age\" to 30.0\n)\n\nval result = userSchema.safeParse(userData)\nwhen (result) {\n    is ZodResult.Success -&gt; println(\"Valid user: ${result.data}\")\n    is ZodResult.Failure -&gt; println(\"Validation errors: ${result.error.errors}\")\n}\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2025 Mehedi Hassan Piash\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"api/collections/","title":"Collections","text":""},{"location":"api/collections/#arrays","title":"Arrays","text":"<p>Validate array values with constraints:</p> <pre><code>val stringArray = Zod.array(Zod.string())\n\n// With constraints\nval constrainedArray = Zod.array(Zod.string())\n    .min(2, \"Array must have at least 2 elements\")\n    .max(10, \"Array must have at most 10 elements\")\n    .length(5, \"Array must have exactly 5 elements\")\n    .nonempty(\"Array must not be empty\")\n</code></pre>"},{"location":"api/collections/#tuples","title":"Tuples","text":"<p>Validate fixed-length arrays with specific types for each position:</p> <pre><code>val coordinates = Zod.tuple(listOf(Zod.number(), Zod.number()))\n\n// Usage\nval result = coordinates.safeParse(listOf(10.0, 20.0))\n</code></pre>"},{"location":"api/collections/#records","title":"Records","text":"<p>Validate objects with string keys and uniform value types:</p> <pre><code>val stringRecord = Zod.record(Zod.string())\nval numberRecord = Zod.record(Zod.number())\n\n// Usage\nval userData = mapOf(\"name\" to \"John\", \"city\" to \"NYC\")\nval result = stringRecord.safeParse(userData)\n</code></pre>"},{"location":"api/enums/","title":"Enums","text":""},{"location":"api/enums/#string-enums","title":"String Enums","text":"<p>Validate enum values:</p> <pre><code>// String enums\nval roleSchema = Zod.enum(\"admin\", \"user\", \"guest\")\n\n// Using collections\nval roles = listOf(\"admin\", \"user\", \"guest\")\nval roleSchema = Zod.enum(roles)\n</code></pre>"},{"location":"api/intersections/","title":"Intersections","text":""},{"location":"api/intersections/#intersections_1","title":"Intersections","text":"<p>Validate values that must satisfy multiple schemas:</p> <pre><code>val personSchema = Zod.objectSchema&lt;Person&gt;({\n    string(\"name\", Zod.string())\n}) { map -&gt;\n    Person(name = map[\"name\"] as String)\n}\n\nval employeeSchema = Zod.objectSchema&lt;Employee&gt;({\n    string(\"employeeId\", Zod.string())\n}) { map -&gt;\n    Employee(employeeId = map[\"employeeId\"] as String)\n}\n\nval personEmployeeSchema = Zod.intersection(personSchema, employeeSchema)\n</code></pre>"},{"location":"api/objects/","title":"Objects","text":""},{"location":"api/objects/#basic-object-validation","title":"Basic Object Validation","text":"<p>Validate complex objects:</p> <pre><code>val userSchema = Zod.objectSchema&lt;User&gt;({\n    string(\"name\", Zod.string().min(2))\n    string(\"email\", Zod.string().email())\n    number(\"age\", Zod.number().min(0).max(120))\n    field(\"isActive\", Zod.boolean().default(true))\n}) { map -&gt;\n    User(\n        name = map[\"name\"] as String,\n        email = map[\"email\"] as String,\n        age = (map[\"age\"] as Number).toDouble(),\n        isActive = map[\"isActive\"] as? Boolean ?: true\n    )\n}\n</code></pre>"},{"location":"api/objects/#strict-objects","title":"Strict Objects","text":"<p>Strict objects (reject unknown keys):</p> <pre><code>val strictUserSchema = Zod.objectSchema&lt;User&gt;({\n    string(\"name\", Zod.string().min(2))\n    string(\"email\", Zod.string().email())\n}) { map -&gt;\n    User(\n        name = map[\"name\"] as String,\n        email = map[\"email\"] as String\n    )\n}.strict()\n</code></pre>"},{"location":"api/objects/#nested-object-validation","title":"Nested Object Validation","text":"<pre><code>val addressSchema = Zod.objectSchema&lt;Address&gt;({\n    string(\"street\", Zod.string().min(5))\n    string(\"city\", Zod.string().min(2))\n    string(\"zipCode\", Zod.string().regex(Regex(\"\\\\d{5}\"))\n}) { map -&gt;\n    Address(\n        street = map[\"street\"] as String,\n        city = map[\"city\"] as String,\n        zipCode = map[\"zipCode\"] as String\n    )\n}\n\nval userWithAddressSchema = Zod.objectSchema&lt;UserWithAddress&gt;({\n    string(\"name\", Zod.string().min(2))\n    field(\"address\", addressSchema)\n}) { map -&gt;\n    UserWithAddress(\n        name = map[\"name\"] as String,\n        address = map[\"address\"] as Address\n    )\n}\n</code></pre>"},{"location":"api/primitives/","title":"Primitives","text":""},{"location":"api/primitives/#string","title":"String","text":"<p>Validate string values with various constraints:</p> <pre><code>val stringSchema = Zod.string()\n\n// With constraints\nval constrainedString = Zod.string()\n    .min(5, \"String must be at least 5 characters\")\n    .max(100, \"String must be at most 100 characters\")\n    .length(10, \"String must be exactly 10 characters\")\n    .email(\"Must be a valid email address\")\n    .url(\"Must be a valid URL\")\n    .regex(Regex(\"^[A-Za-z]+$\"), \"Must contain only letters\")\n    .startsWith(\"Hello\", \"Must start with 'Hello'\")\n    .endsWith(\"World\", \"Must end with 'World'\")\n    .includes(\"test\", \"Must contain 'test'\")\n    .toLowerCase()\n    .toUpperCase()\n    .trim()\n</code></pre>"},{"location":"api/primitives/#number","title":"Number","text":"<p>Validate numeric values:</p> <pre><code>val numberSchema = Zod.number()\n\n// With constraints\nval constrainedNumber = Zod.number()\n    .gt(0, \"Must be greater than 0\")\n    .gte(5, \"Must be greater than or equal to 5\")\n    .lt(100, \"Must be less than 100\")\n    .lte(50, \"Must be less than or equal to 50\")\n    .min(10, \"Must be at least 10\")\n    .max(90, \"Must be at most 90\")\n    .int(\"Must be an integer\")\n    .positive(\"Must be positive\")\n    .negative(\"Must be negative\")\n    .nonPositive(\"Must be non-positive\")\n    .nonNegative(\"Must be non-negative\")\n    .multipleOf(5, \"Must be a multiple of 5\")\n</code></pre>"},{"location":"api/primitives/#boolean","title":"Boolean","text":"<p>Validate boolean values:</p> <pre><code>val booleanSchema = Zod.boolean()\n</code></pre>"},{"location":"api/primitives/#date","title":"Date","text":"<p>Validate date values:</p> <pre><code>val dateSchema = Zod.date()\n\n// With constraints\nval constrainedDate = Zod.date()\n    .min(LocalDateTime(2020, 1, 1, 0, 0), \"Date must be after 2020\")\n    .max(LocalDateTime(2030, 12, 31, 23, 59), \"Date must be before 2030\")\n</code></pre>"},{"location":"api/primitives/#null-undefined","title":"Null &amp; Undefined","text":"<p>Validate null and undefined values:</p> <pre><code>val nullSchema = Zod.null()\nval undefinedSchema = Zod.undefined()\n</code></pre>"},{"location":"api/primitives/#literals","title":"Literals","text":"<p>Validate exact literal values:</p> <pre><code>val literalSchema = Zod.literal(\"admin\")\nval numberLiteral = Zod.literal(42)\nval booleanLiteral = Zod.literal(true)\n</code></pre>"},{"location":"api/primitives/#nullables","title":"Nullables","text":"<p>Mark schemas as accepting null values:</p> <pre><code>val nullableString = Zod.string().nullable()\n\n// Usage\nval result1 = nullableString.safeParse(\"hello\") // Success\nval result2 = nullableString.safeParse(null)   // Success\nval result3 = nullableString.safeParse(42)       // Failure\n</code></pre>"},{"location":"api/primitives/#optionals","title":"Optionals","text":"<p>Mark schemas as accepting undefined values:</p> <pre><code>val optionalString = Zod.string().optional()\n\n// Usage\nval result1 = optionalString.safeParse(\"hello\") // Success\nval result2 = optionalString.safeParse(null)     // Success (undefined)\n</code></pre>"},{"location":"api/primitives/#defaults","title":"Defaults","text":"<p>Provide default values for schemas:</p> <pre><code>val stringWithDefault = Zod.string().default(\"unknown\")\nval numberWithDefault = Zod.number().default { 0.0 }\n\n// Usage\nval result1 = stringWithDefault.safeParse(null)     // Success with \"unknown\"\nval result2 = stringWithDefault.safeParse(\"hello\")  // Success with \"hello\"\n</code></pre>"},{"location":"api/refinements/","title":"Refinements","text":""},{"location":"api/refinements/#refinements_1","title":"Refinements","text":"<p>Add custom validation rules:</p> <pre><code>val evenNumber = Zod.number().refine({ it.toInt() % 2 == 0 }) { \"Number must be even\" }\nval strongPassword = Zod.string().refine({ it.length &gt;= 8 &amp;&amp; it.any { char -&gt; char.isDigit() } }) { \"Password must be at least 8 characters with numbers\" }\n</code></pre>"},{"location":"api/refinements/#conditional-validation","title":"Conditional Validation","text":"<pre><code>// Custom validation based on other fields\nval conditionalSchema = Zod.objectSchema&lt;Conditional&gt;({\n    string(\"type\", Zod.enum(\"email\", \"phone\"))\n    string(\"value\", Zod.string())\n}) { map -&gt;\n    Conditional(\n        type = map[\"type\"] as String,\n        value = map[\"value\"] as String\n    )\n}.refine({ obj -&gt;\n    when (obj.type) {\n        \"email\" -&gt; obj.value.contains(\"@\")\n        \"phone\" -&gt; obj.value.all { it.isDigit() || it == '-' }\n        else -&gt; true\n    }\n}) { \"Value must match the selected type\" }\n</code></pre>"},{"location":"api/transformations/","title":"Transformations","text":""},{"location":"api/transformations/#transformations_1","title":"Transformations","text":"<p>Transform values during validation:</p> <pre><code>val uppercaseString = Zod.string().transform { it.uppercase() }\nval toString = Zod.number().transform { it.toInt().toString() }\n\n// Usage\nval result = toString.safeParse(42.5) // Success with \"42\"\n</code></pre>"},{"location":"api/unions/","title":"Unions","text":""},{"location":"api/unions/#basic-unions","title":"Basic Unions","text":"<p>Validate values that match any of multiple schemas:</p> <pre><code>val stringOrNumber = Zod.union(Zod.string(), Zod.number())\nval complexUnion = Zod.union(\n    Zod.string(),\n    Zod.number(),\n    Zod.objectSchema&lt;Point&gt;({\n        number(\"x\", Zod.number())\n        number(\"y\", Zod.number())\n    }) { map -&gt;\n        Point(\n            x = (map[\"x\"] as Number).toDouble(),\n            y = (map[\"y\"] as Number).toDouble()\n        )\n    }\n)\n</code></pre>"}]}